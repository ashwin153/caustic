module caustic.example

/**
 * A read-write lock.
 *
 * @param readers Number of readers.
 * @param writers Number of writers.
 */
struct Lock {
  readers: Int,
  writers: Int
}

/**
 * An access permit.
 *
 * @param lock Underlying lock.
 * @param forRead Read access.
 * @param forWrite Write access.
 */
struct Permit {
  lock: Lock&,
  forRead: Boolean,
  forWrite: Boolean
}

/**
 * A distributed lock service.
 */
service LockService {

  /**
   * Attempts to acquire exclusive access to the lock.
   *
   * @param lock Lock.
   * @return Read-write permit.
   */
  def exclusive(lock: Lock&): Permit = {
    if (lock.writers > 0 || lock.readers > 0) {
      Permit(lock, false, false)
    } else {
      lock.writers += 1
      Permit(lock, true, true)
    }
  }

  /**
   * Attempts to acquire shared access to the lock.
   *
   * @param lock Lock.
   * @return Read-only permit.
   */
  def shared(lock: Lock&): Permit = {
    if (lock.writers > 0) {
      Permit(lock, false, false)
    } else {
      lock.readers += 1
      Permit(lock, true, false)
    }
  }

  /**
   * Revoke the permit's access.
   *
   * @param permit Permit.
   */
  def release(permit: Permit): Unit = {
    if (permit.forWrite) {
      permit.lock.writers -= 1
    } elif (permit.forRead) {
      permit.lock.readers -= 1
    }
  }

}